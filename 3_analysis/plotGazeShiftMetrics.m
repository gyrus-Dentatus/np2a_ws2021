function plotGazeShiftMetrics(exper, anal, fixationSubset, amplitude, duration, latency, meanGazePos, blinkFlag)

    % Plots saccade metrics for individual subjects
    %
    % The following metrics are plotted:
    % - gaze shift amplitudes (gaze-shift-wise)
    % - gaze shift durations (gaze-shift-wise)
    % - gaze shift latencies (gaze-shift-wise)
    % - mean gaze position inbetween gaze shifts (gaze-shift-wise)
    %
    % NOTE:
    % Plot is invisible and will not show during plotting
    %
    % Input
    % exper:
    % structure; general experiment settings, as returned by the
    % "settings_exper" script
    %
    % anal:
    % structure; various analysis settings, as returned by the
    % "settings_analysis" script
    %
    % fixationSubset:
    % matrix; subset of non-excluded fixations
    %
    % amplitude:
    % matrix; gaze shift amplitudes
    %
    % duration:
    % matrix; gaze shift durations
    %
    % latency:
    % matrix; gaze shift latencies
    %
    % meanGazePos:
    % matrix; mean gaze position inbetween gaze shifts
    %
    % blinkFlag:
    % matrix; gaze-shift-wise flags for whether a gaze shift was a blink or
    % saccade
    %
    % Output
    % --

    %% Define settings for visuals
    opt.line.style = '-';
    opt.line.color = [0, 0, 0];
    opt.line.width = 3;
    
    opt.swarm.markerSize = 120;
    opt.swarm.markerFill = 'filled';
    opt.swarm.markerFaceColor = [0, 0, 0];
    opt.swarm.markerEdgeColor = [1, 1, 1];
    opt.swarm.markerFaceAlpha = 0.15;
    
    %% Make plots
    close all;
    for c = 1:exper.n.CONDITIONS % Condition
        for s = 1:exper.n.SUBJECTS % Subject
            thisSubject.number = exper.num.SUBJECTS(s);
            thisSubject.fixations.subset = fixationSubset{thisSubject.number,c};
            if ismember(thisSubject.number, anal.excludedSubjects) | ...
               isempty(thisSubject.fixations.subset)
                continue
            end
            thisSubject.gazeShifts.amplitude = amplitude{thisSubject.number,c}(thisSubject.fixations.subset,:);
            thisSubject.gazeShifts.duration = duration{thisSubject.number,c}(thisSubject.fixations.subset);
            thisSubject.gazeShifts.latency = latency{thisSubject.number,c}(thisSubject.fixations.subset);
            thisSubject.gazeShifts.meanGazePos = meanGazePos{thisSubject.number,c}(thisSubject.fixations.subset,:);
            thisSubject.gazeShifts.isBlink = logical(blinkFlag{thisSubject.number,c}(thisSubject.fixations.subset,3));
            thisSubject.gazeShifts.n = numel(thisSubject.gazeShifts.duration);
            thisSubject.gazeShifts.nBlinks = sum(thisSubject.gazeShifts.isBlink);
    
            handleFigure = figure('Units', 'normalized', ...
                                  'Position', [0, 0, 1, 0.50], ...
                                  'Visible', 'off');
            tiledlayout(1,5);
    
            % Gaze shift amplitudes
            nexttile;
            line([-5, 25], [0, 0], ...
                 'LineStyle', opt.line.style, ...
                 'Color', opt.line.color, ...
                 'LineWidth', opt.line.width, ...
                 'HandleVisibility', 'off');
            hold on
            xCoord = [randn(1, thisSubject.gazeShifts.n)', ...
                      randn(1, thisSubject.gazeShifts.n)' + 10, ...
                      randn(1, thisSubject.gazeShifts.n)' + 20];
            swarmchart(xCoord(~thisSubject.gazeShifts.isBlink,:), ..., 
                       thisSubject.gazeShifts.amplitude(~thisSubject.gazeShifts.isBlink,:), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', opt.swarm.markerEdgeColor, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha, ...
                       'HandleVisibility', 'off');
            swarmchart(xCoord(thisSubject.gazeShifts.isBlink,:), ...
                       thisSubject.gazeShifts.amplitude(thisSubject.gazeShifts.isBlink,:), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', [0, 0, 0], ...
                       'LineWidth', 2, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha);
            hold off
            xticks(0:10:20);
            xticklabels({"hor.", "vert.", "2d"});
            ylabel('Gaze shift amplitude [dva]');
    
            % Gaze shift durations
            nexttile;
            xCoord = randn(1, thisSubject.gazeShifts.n);
            swarmchart(xCoord(~thisSubject.gazeShifts.isBlink), ...
                       thisSubject.gazeShifts.duration(~thisSubject.gazeShifts.isBlink), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', opt.swarm.markerEdgeColor, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha, ...
                       'HandleVisibility', 'off');
            hold on
            swarmchart(xCoord(thisSubject.gazeShifts.isBlink), ...
                       thisSubject.gazeShifts.duration(thisSubject.gazeShifts.isBlink), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', [0, 0, 0], ...
                       'LineWidth', 2, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha);
            hold off
            xticks([]);
            ylabel('Gaze shift duration [ms]');
    
            % Gaze shift latencies
            nexttile;
            xCoord = randn(1, thisSubject.gazeShifts.n);
            swarmchart(xCoord(~thisSubject.gazeShifts.isBlink), ...
                       thisSubject.gazeShifts.latency(~thisSubject.gazeShifts.isBlink), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', opt.swarm.markerEdgeColor, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha, ...
                       'HandleVisibility', 'off');
            hold on
            swarmchart(xCoord(thisSubject.gazeShifts.isBlink), ...
                       thisSubject.gazeShifts.latency(thisSubject.gazeShifts.isBlink), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', [0, 0, 0], ...
                       'LineWidth', 2, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha);
            hold off
            xticks([]);
            ylabel('Gaze shift latency [ms]');
    
            % Average gaze position between gaze shifts
            nexttile;
            line([-5, 15], [0, 0], ...
                 'LineStyle', opt.line.style, ...
                 'Color', opt.line.color, ...
                 'LineWidth', opt.line.width, ...
                 'HandleVisibility', 'off');
            hold on
            xCoord = [randn(1, thisSubject.gazeShifts.n)', ...
                      randn(1, thisSubject.gazeShifts.n)' + 10];
            swarmchart(xCoord(~thisSubject.gazeShifts.isBlink,:), ...
                       thisSubject.gazeShifts.meanGazePos(~thisSubject.gazeShifts.isBlink,[1,3]), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', opt.swarm.markerEdgeColor, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha, ...
                       'HandleVisibility', 'off');
            swarmchart(xCoord(thisSubject.gazeShifts.isBlink,:), ...
                       thisSubject.gazeShifts.meanGazePos(thisSubject.gazeShifts.isBlink,[1,3]), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', [0, 0, 0], ...
                       'LineWidth', 2, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha);
            hold off
            xticks(0:10:10);
            xticklabels({"x-pos", "y-pos"});
            ylabel('Mean gaze position [dva]');
    
            % Std. of average position between gaze shifs
            nexttile;
            xCoord = [randn(1, thisSubject.gazeShifts.n)', ...
                      randn(1, thisSubject.gazeShifts.n)' + 10];
            swarmchart(xCoord(~thisSubject.gazeShifts.isBlink,:), ...
                       thisSubject.gazeShifts.meanGazePos(~thisSubject.gazeShifts.isBlink,[2,4]), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', opt.swarm.markerEdgeColor, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha, ...
                       'HandleVisibility', 'off');
            hold on
            swarmchart(xCoord(thisSubject.gazeShifts.isBlink,:), ...
                       thisSubject.gazeShifts.meanGazePos(thisSubject.gazeShifts.isBlink,[2,4]), ...
                       opt.swarm.markerSize, ...
                       opt.swarm.markerFill, ...
                       'MarkerFaceColor', opt.swarm.markerFaceColor, ...
                       'MarkerEdgeColor', [0, 0, 0], ...
                       'LineWidth', 2, ...
                       'MarkerFaceAlpha', opt.swarm.markerFaceAlpha);
            hold off
            xticks(0:10:10);
            xticklabels({"x-pos", "y-pos"});
            ylabel('Std. of mean gaze position [dva]');
    
            legend('Blink', ...
                   'Location', 'NorthEastOutside', ...
                   'Box', 'off');
            set(findall(gcf, '-property', 'FontSize'), 'FontSize', 25);
            exportgraphics(handleFigure, ...
                           strcat(exper.path.figures.singleSubjects{c}, ...
                                  'gazeShiftMetrics', ...
                                  '_s', num2str(thisSubject.number), ...
                                  '.png'), ...
                           'Resolution', 300);
            close all;
            clear thisSubject
        end
    end
end