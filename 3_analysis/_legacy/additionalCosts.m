%% Init
load("/Users/ilja/Dropbox/12_work/mr_informationSamplingVisualManual/" + ...
     "2_data/data_newPipeline.mat");
addpath("/Users/ilja/Dropbox/12_work/mr_informationSamplingVisualManual/3_analysis");

%% Calculate costs
inspectionPlanningTimeRation.trialwise = cell(24, 4);
for c = 1:exper.n.CONDITIONS % Condition
    for s = 1:exper.n.SUBJECTS % Subject
        thisSubject.number = exper.num.SUBJECTS(s);
        thisSubject.planningTime = ...
            data.time.planning.trialwise{thisSubject.number,c};
        thisSubject.inspectionTime = ...
            data.time.inspection.trialwise{thisSubject.number,c};

        inspectionPlanningTimeRation.trialwise{thisSubject.number,c} = ...
            thisSubject.planningTime ./ thisSubject.inspectionTime;
        clear thisSubject
    end
end

%% Get mean costs
% Seperate for targets and overall
inspectionPlanningTimeRation.mean.easy = ...
    getAvg(exper, anal, ...
           inspectionPlanningTimeRation.trialwise, ...
           data.choice.target.id, ...
           exper.stimulus.id.target.EASY, ...
           data.log.nDistractors.easy.trialwise, [], 'median', 'median');
inspectionPlanningTimeRation.mean.difficult = ...
    getAvg(exper, anal, ...
           inspectionPlanningTimeRation.trialwise, ...
           data.choice.target.id, ...
           exper.stimulus.id.target.DIFFICULT, ...
           data.log.nDistractors.difficult.trialwise, [], 'median', 'median');
inspectionPlanningTimeRation.mean.overall = ...
    getAvg(exper, anal, ...
           inspectionPlanningTimeRation.trialwise, ...
           data.choice.target.id, ...
           [], ...
           data.log.nDistractors.easy.trialwise, [], 'median', 'median');

%% Plot
condIdx = [1, 3]; % Single in visual (1) and manual (3)
tileTitle = {'Visual', 'Manual', 'Both overall'};
axLim = [inspectionPlanningTimeRation.mean.easy(:,condIdx), ...
         inspectionPlanningTimeRation.mean.difficult(:,condIdx)];
axLim = [floor(min(axLim(:))*10)/10,...
         ceil(max(axLim(:))*10)/10];
axLim = [axLim, axLim];
nTiles = numel(tileTitle);

close all;
figure;
tiledlayout(1,nTiles);
for t = 1:(nTiles-1) % Tile
    nexttile;
    line(axLim(1:2), axLim(3:4), ...
         'Color', fig.color.BLACK, ...
         'HandleVisibility', 'off');
    hold on
    line([0, axLim(end)], [1, 1], ...
         'Color', fig.color.BLACK, ...
         'HandleVisibility', 'off');
    line([1, 1], [0, axLim(end)], ...
         'Color', fig.color.BLACK, ...
         'HandleVisibility', 'off');
    plot(inspectionPlanningTimeRation.mean.easy(:,condIdx(t)), ...
         inspectionPlanningTimeRation.mean.difficult(:,condIdx(t)), ...
         'o', ...
         'MarkerFaceColor', fig.color.BLACK, ...
         'MarkerSize', 8);
    [~, ~, h] = plotMean(inspectionPlanningTimeRation.mean.easy(:,condIdx(t)), ...
                          inspectionPlanningTimeRation.mean.difficult(:,condIdx(t)), ...
                          fig.color.BLACK);
    for i = 1:numel(h) % Handle
        set(h, ...
            'MarkerFaceColor', fig.color.BLACK, ...
            'MarkerSize', 15, ...
            'LineWidth', 2, ...
            'Color', fig.color.BLACK)
    end
    hold off
    axis(axLim, 'square');
    xticks(0:0.25:10);
    yticks(0:0.25:10);
    xlabel('Planning/inspection time ratio [easy]');
    ylabel('Planning/inspection time ratio [difficult]');
    title(tileTitle(t));
    set(gca, "FontSize", 20);
end

nexttile;
line([0, 3], [1, 1], ...
     'Color', fig.color.BLACK, ...
     'HandleVisibility', 'off');
hold on
plot(1, ...
     inspectionPlanningTimeRation.mean.overall(:,condIdx(1)), ...
     "o", ...
     'MarkerSize', 8, ...
     'MarkerFaceColor', fig.color.BLACK, ...
     'MarkerEdgeColor', 'None')
plot(2, ...
     inspectionPlanningTimeRation.mean.overall(:,condIdx(2)), ...
     "o", ...
     'MarkerSize', 8, ...
     'MarkerFaceColor', fig.color.BLACK, ...
     'MarkerEdgeColor', 'None');
errorbar((1+0.25), ...
         mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(1)), 'omitnan'), ...
         ci_mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(1))), ...
         "o", ...
         'MarkerSize', 15, ...
         'LineWidth', 2, ...
         'MarkerFaceColor', fig.color.BLACK, ...
         'MarkerEdgeColor', 'None', ...
         'Color', fig.color.BLACK)
errorbar((2-0.25), ...
         mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(2)), 'omitnan'), ...
         ci_mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(2))), ...
         "o", ...
         'MarkerSize', 15, ...
         'LineWidth', 2, ...
         'MarkerFaceColor', fig.color.BLACK, ...
         'MarkerEdgeColor', 'None', ...
         'Color', fig.color.BLACK)
line([(1+0.25), (2-0.25)], ...
     [mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(1)), 'omitnan'), ...
      mean(inspectionPlanningTimeRation.mean.overall(:,condIdx(2)), 'omitnan')], ...
      'LineWidth', 2, ...
      'Color', fig.color.BLACK);
hold off
axis([0, 3, axLim(3:end)], 'square');
xticks([1, 2]);
yticks(0:0.25:10);
xticklabels(["Visual", "Manual"])
xlabel("Experiment");
ylabel('Planning/inspection time ratio');
title('Overall');
box off
set(gca, "FontSize", 20);
set(gcf, ...
    "Units", "Normalized", ...
    "Position", [0, 0, 1, 0.55]);
print("./additionalCosts", "-dpng");
close;
