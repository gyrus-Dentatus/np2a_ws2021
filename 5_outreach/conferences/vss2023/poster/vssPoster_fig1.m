function vssPoster_fig1(dataVisual, dataManual, plt, opt)

    %% Settings
    figurePath = ['/Users/ilja/Dropbox/12_work/mr_informationSamplingVisualManual/' ...
                  '5_outreach/conferences/vss2023/poster/'];
%     figurePath = ['/Users/i/Dropbox/12_work/mr_informationSamplingVisualManual/' ... ...
%                   '5_outreach/conferences/vss2023/poster/'];

    %% Panel 1: single-subject choice curve
    % Settings
    subjectOfInterest = 4;
    conditionOfInterest = 2; % Double-target
     
    choiceData.visual = dataVisual.stim.propChoice.easy(:,subjectOfInterest,conditionOfInterest);
    choiceData.manual = dataManual.stim.propChoice.easy(:,subjectOfInterest,conditionOfInterest);
    regressionFit.visual = [dataVisual.model_io.reg.xn(subjectOfInterest,:)-1; ...
                            dataVisual.model_io.reg.yn(subjectOfInterest,:)];
    regressionFit.manual = [dataManual.model_io.reg.xn(subjectOfInterest,:)-1; ...
                            dataManual.model_io.reg.yn(subjectOfInterest,:)];
    regressionParameter.visual = round(dataVisual.model_io.reg.fit(subjectOfInterest,:), 2);
    regressionEquation.visual = ['y = ', num2str(regressionParameter.visual(1)), ...
                                 ' + x * ', num2str(regressionParameter.visual(2))];
    
    axisLimits = [[-1, 9]; [0, max(regressionFit.visual(2,:))]];
    lineLimitsHorizontal = [axisLimits(1,:)', [4; 4]];
    lineLimitsVertical = [[0.50; 0.50], [0.25; axisLimits(2,2)]];
    nDatapoints = numel(choiceData.visual);
    
    figureHandle = figure;
    tiledlayout(1, 2);
    nexttile;
    line(lineLimitsHorizontal, lineLimitsVertical, ...
        'LineStyle',        '--', ...
        'LineWidth',        plt.line.widthThin, ...
        'Color',            plt.color.gray(3,:), ...
        'HandleVisibility', 'off');
    hold on
    plot(0:(nDatapoints-1), choiceData.visual, ...
        'o-', ...
        'MarkerSize',      plt.marker.sizeSmall, ...
        'MarkerFaceColor', plt.color.green(2,:), ...
        'MarkerEdgeColor', 'none', ...
        'LineWidth',       plt.line.widthThick, ...
        'Color',           plt.color.green(2,:))
    plot(regressionFit.visual(1,:), regressionFit.visual(2,:), ...
        '-', ...
        'LineWidth', plt.line.widthThick, ...
        'Color',     plt.color.black);
    text(-0.25, 0.10, regressionEquation.visual)
    hold off
    axis([axisLimits(1,:), axisLimits(2,:)], 'square')
    xticks((axisLimits(1,1)+1):2:(axisLimits(1,2)-1))
    yticks(axisLimits(2,1):0.25:axisLimits(2,2))
    xlabel('# easy distractors');
    ylabel('Prop. choices [easy target]');
    legend({'Data'; 'Linear regression'}, ...
           'Position', [0.08, 0.27, 0.30, 0.10]);
    legend box off
    box off
    title(['Participant ' num2str(subjectOfInterest)]);
    
    %% Panel 2: regression parameter all participants
    regressionParameter.visual = dataVisual.model_io.reg.fit;
    regressionParameter.manuel = dataManual.model_io.reg.fit;
    regressionParameter.both = cat(3, ...
                                   regressionParameter.visual, ...
                                   regressionParameter.manuel);
    
    axisLimits = [min(regressionParameter.both(:)), max(regressionParameter.both(:))];
    plotMarker = {'o', 'd'};
    lineHorizontal = [[axisLimits'], [axisLimits'], [0; 0]];
    lineVertical = [[axisLimits'], [0; 0], axisLimits'];

    axisHandle = nexttile;
    line(lineHorizontal, lineVertical, ...
        'LineStyle',        '--', ...
        'LineWidth',        plt.line.widthThin, ...
        'Color',            plt.color.gray(3,:), ...
        'HandleVisibility', 'off');
    hold on
    for p = 1:2 % Parameter
        thisData = squeeze(regressionParameter.both(:,p,:));

        plot(thisData(:,1), thisData(:,2), ...
            'Marker',           plotMarker{p}, ...
            'MarkerSize',       plt.marker.sizeSmall, ...
            'MarkerFaceColor',  plt.color.gray(2,:), ...
            'MarkerEdgeColor',  plt.color.white, ...
            'LineStyle',        'none', ...
            'LineWidth',        plt.line.widthThin, ...
            'HandleVisibility', 'off');
        set(axisHandle, ...
            'XColor', plt.color.green(1,:), ...
            'YColor', plt.color.purple(1,:));
        [~, ~, meanHandle] = plotMean(thisData(:,1), thisData(:,2), plt.color.black);
        set(meanHandle, ...
            'MarkerSize',       plt.marker.sizeLarge, ...
            'MarkerFaceColor',  plt.color.black, ...
            'MarkerEdgeColor',  'none', ...
            'LineWidth',        plt.line.widthThin);
        set(meanHandle(1), ...
            'Marker', plotMarker{p});
        set(meanHandle(2:end), ...
            'HandleVisibility', 'off')
    end
    hold off
    axis([axisLimits, axisLimits], 'square')
    xticks(-0.10:0.10:0.50);
    yticks(-0.10:0.10:0.50);
    xlabel('Visual search')
    ylabel('Manual search')
    legend({'Intercept [difficulty]'; 'Slope [set size]'}, ...
            'Position', [0.58, 0.18, 0.50, 0.14]);
    legend box off
    box off

    %% Save plot
    opt.size = [45, 20];
    opt.imgname = [figurePath, 'figure1.png'];
    opt.fontSize = 30;
    opt.save = 1;
    prepareFigure(figureHandle, opt);
    close

end