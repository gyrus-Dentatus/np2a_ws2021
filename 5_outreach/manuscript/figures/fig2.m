clear all; close all; clc

%% Init
initFig;
folder.fig = strcat(folder.root, "5_outreach/manuscript/figures/fig2");

%% Plot settings
idx.singleTarget.visual = 1;
idx.singleTarget.manual = 3;
plotDat = cat(3, ...
              [data.performance.proportionCorrect.easy(:,idx.singleTarget.visual), ...
               data.performance.proportionCorrect.difficult(:,idx.singleTarget.visual)], ...
              [data.time.planning.mean.easy(:,idx.singleTarget.visual), ...
               data.time.planning.mean.difficult(:,idx.singleTarget.visual)], ...
              [data.time.inspection.mean.easy(:,idx.singleTarget.visual), ...
               data.time.inspection.mean.difficult(:,idx.singleTarget.visual)], ...
              [data.time.response.mean.easy(:,idx.singleTarget.visual), ...
               data.time.response.mean.difficult(:,idx.singleTarget.visual)], ...
              [data.performance.proportionCorrect.easy(:,idx.singleTarget.manual), ...
               data.performance.proportionCorrect.difficult(:,idx.singleTarget.manual)], ...
              [data.time.planning.mean.easy(:,idx.singleTarget.manual), ...
               data.time.planning.mean.difficult(:,idx.singleTarget.manual)], ...
              [data.time.inspection.mean.easy(:,idx.singleTarget.manual), ...
               data.time.inspection.mean.difficult(:,idx.singleTarget.manual)], ...
              [data.time.response.mean.easy(:,idx.singleTarget.manual), ...
               data.time.response.mean.difficult(:,idx.singleTarget.manual)]);

xLabels = repmat(["Proportion correct easy", ...
                  "Planning time easy [s]", ...
                  "Inspection time easy [s]", ...
                  "Response time easy [s]"], ...
                 1, 2);
yLabels = repmat(["Proportion correct difficult", ...
                  "Planning time difficult [s]", ...
                  "Inspection time difficult [s]", ...
                  "Response time difficult [s]"], ...
                 1, 2);
axLimits = [[0.70, 1]; [150, 750]; [250, 1000]; [400, 1300]; ...
            [0.70, 1]; [500, 1250]; [750, 1650]; [400, 1300]];
axTicks = [{axLimits(1,1):0.10:axLimits(1,2)}, ...
           {axLimits(2,1):200:axLimits(2,2)}, ...
           {axLimits(3,1):250:axLimits(3,2)}, ...
           {axLimits(4,1):300:axLimits(4,2)}, ...
           {axLimits(5,1):0.10:axLimits(5,2)}, ...
           {axLimits(6,1):250:axLimits(6,2)}, ...
           {axLimits(7,1):300:axLimits(7,2)}, ...
           {axLimits(8,1):300:axLimits(8,2)}];

% Convert data from seconds to milliseconds
plotDat(:,:,[2:4, 6:8]) = plotDat(:,:,[2:4, 6:8]) ./ 1000;
axLimits([2:4, 6:8],:) = round(axLimits([2:4, 6:8],:) ./ 1000, 2);
axTicks([2:4, 6:8]) = cellfun(@(x) x ./ 1000, axTicks([2:4, 6:8]), 'UniformOutput', false);

%% Plot
nPanels = size(plotDat, 3);

hFig = figure;
tiledlayout(2, 4);
for p = 1:nPanels % Panel
    if any(p == 1:4) % Visual search experiment
        plt.color.condition = plt.color.green;
    else
        plt.color.condition = plt.color.purple;
    end

    nexttile;
    line(axLimits(p,:), axLimits(p,:), ...
         'LineStyle', '-', ...
         'LineWidth', plt.line.widthThin, ...
         'Color', plt.color.black, ...
         'HandleVisibility', 'off');
    hold on
    plot(plotDat(:,1,p), plotDat(:,2,p), ...
         'o', ...
         'MarkerSize', plt.marker.sizeSmall, ...
         'MarkerFaceColor', plt.color.condition(2,:), ...
         'MarkerEdgeColor', plt.color.white, ...
         'LineWidth', plt.line.widthThin, ...
         'Color', plt.color.condition(2,:))
    errorbar(mean(plotDat(:,1,p), 1, 'omitnan'), ...
             mean(plotDat(:,2,p), 1, 'omitnan'), ...
             ci_mean(plotDat(:,2,p)), ci_mean(plotDat(:,2,p)), ...
             ci_mean(plotDat(:,1,p)), ci_mean(plotDat(:,1,p)), ...
             'o', ...
             'MarkerSize', plt.marker.sizeLarge, ...
             'MarkerFaceColor', plt.color.condition(1,:), ...
             'MarkerEdgeColor', 'none', ...
             'LineWidth', plt.line.widthThin, ...
             'CapSize', 0, ...
             'Color', plt.color.condition(1,:), ...
             'HandleVisibility', 'off')
    [~, ~, h] = plotMean(plotDat(:,1,p), plotDat(:,2,p), plt.color.condition(1,:));
    set(h(4), 'LineWidth', plt.line.widthThin);
    hold off
    axis([axLimits(p,:), axLimits(p,:)], 'square');
    xlabel(xLabels(p));
    ylabel(yLabels(p));
    xticks(axTicks{p});
    yticks(axTicks{p});
    box off
end
sublabel([], -60, -45);
opt.size = [55, 25];
opt.imgname = folder.fig;
opt.save = true;
prepareFigure(hFig, opt);
close;